#summary SHEL Developer's guide
#labels Phase-Implementation
#sidebar TableOfContents

=Design philosophy=
Here are some development guidelines:
 * *Devise coherent global variables that have a specific role in numerical modeling of fluid mechanics.* For example, `eta` is the water elevation, `d` is bathymetry depth and `H` is the water depth (sum of `eta` and `d`). These global variables can be invoked in any part of the code and, thus, their list must be constantly updated and synchronized between this wiki and the code.
 * *Separate functions, or replaceable parts of the numerical engine, in different files, but keep the number of files as low as possible.* For example, the temporal numerical scheme is contained in the file `ComputeLeapfrog.m`, the spatial numerical scheme is contained in the file `ComputeSpaceU_CS.m`, and the open boundaries schemes are contained in the file `computeOB_U.m`. That way, it is easy for other developers to replace the current functional file with another. It makes it also easy to upgrade to a system where the user can choose between different types of schemes for the same function; like for example, to change the `ComputeLeapfrog.m` file with a `ComputeMcCormack.m`.
 * *Use the Matlab index notation to perform matricial computations. `do loops` are forbidded!* The `profiler on` tool showed a 10x improvement in computation speed when `do loops` are religiously avoided.
 * *Make the graphical interface as simple, friendly, flexible and bullet-proof as possible.* The goal is to minimize the number of clicks to achieve an action, but also to opt-out possible pathways that would lead the user to a dead-end. For example, once the _tracer_ checkbox is deactivated in the _control panel_, then all the options related becomed disabled (greyed out). This is powerful visual feedback to the user about his choices left.
 * *Infinite configurations are possible and yet, a past successful configuration must be always reloadable.* This means that the state of the global variables that define a configuration must be easily saved and later reloaded. This includes matricial fields like the bathymetry, `d`, or the velocity fields, `u` and `v`.
 * *Whenever an image is exported, its configuration file must be saved along with it.* This is to allow the user to later reproduce the image and eventually change the legend, or some of its parameters. It is better than saving the whole fig file for each image.

==Design futur improvements==
This is mostly a wish-list of futur improvements in the design and structure of the SHEL interface:
 * Integrate the _control panel_ in the _views panel_ as a _menubar_ with child menus. Users would get bigger a sense of familiarity with the SHEL interface.
 * Load a preview snapshot of saved configurations, added of a short description by the creator.
 * Find a way to centralize, distribute and promote SHEL configuration files.
 * Allow users to choose from different numerical schemes from dropdown menus. Make it easy from the developers side to integrate new numerical schemes in the SHEL.
 * See if the code is faster by avoiding to use the `global` directive, while keeping in mind the same global variables philosophy. Perhaps by pushing structures in the function calls...

=Resources listing=
Here's an exhaustive description of the SHEL inner resources, such as folders, files, functions and global variables.

==Folders==
 # *root folder*: contains the SHEL matlab scripts.
 # *initial-conditions*: contains SHEL configurations in the matlab data file format (.mat).
 # *images-results*: if not present, the folder is created after the user exports images from the SHEL views panel. It contains a set of sub-folders, each containing images, avi movies generated by the user, along with the SHEL configuration file and the timeseries data files.

==Files==
 # `launch.m`: contains the script that fires up the _control panel_ and its _resetbutton_ callback.
 # `controlpanel2D.m`:

===matlab scripts===

===configuration data===

==Global variables==

===loadable and save-able===

===Matricial===

==Functions==