#summary SHEL Developer's guide
#labels Phase-Implementation
#sidebar TableOfContents
<wiki:toc max_depth="3" />
----
=Design philosophy=
Here are some development guidelines:
 * *Devise coherent global variables that have a specific role in numerical modeling of fluid mechanics.* For example, `eta` is the water elevation, `d` is bathymetry depth and `H` is the water depth (sum of `eta` and `d`). These global variables can be invoked in any part of the code and, thus, their list must be constantly updated and synchronized between this wiki and the code.
 * *Separate functions, or replaceable parts of the numerical engine, in different files, but keep the number of files as low as possible.* For example, the temporal numerical scheme is contained in the file `ComputeLeapfrog.m`, the spatial numerical scheme is contained in the file `ComputeSpaceU_CS.m`, and the open boundaries schemes are contained in the file `computeOB_U.m`. That way, it is easy for other developers to replace the current functional file with another. It makes it also easy to upgrade to a system where the user can choose between different types of schemes for the same function; like for example, to change the `ComputeLeapfrog.m` file with a `ComputeMcCormack.m`.
 * *Use the Matlab index notation to perform matricial computations. `do loops` are forbidded!* The `profiler on` tool showed a 10x improvement in computation speed when `do loops` are religiously avoided.
 * *Make the graphical interface as simple, friendly, flexible and bullet-proof as possible.* The goal is to minimize the number of clicks to achieve an action, but also to opt-out possible pathways that would lead the user to a dead-end. For example, once the _tracer_ checkbox is deactivated in the _control panel_, then all the options related becomed disabled (greyed out). This is powerful visual feedback to the user about his choices left.
 * *Infinite configurations are possible and yet, a past successful configuration must be always reloadable.* This means that the state of the global variables that define a configuration must be easily saved and later reloaded. This includes matricial fields like the bathymetry, `d`, or the velocity fields, `u` and `v`.
 * *Whenever an image is exported, its configuration file must be saved along with it.* This is to allow the user to later reproduce the image and eventually change the legend, or some of its parameters. It is better than saving the whole fig file for each image.

==Futur design improvements==
This is mostly a wish-list of futur improvements in the design and structure of the SHEL interface:
 * *Integrate the _control panel_ in the _views panel_ as a _menubar_ with child menus*. Users would get bigger a sense of familiarity with the SHEL interface.
 * *Load a preview snapshot of saved configurations*, added of a short description by the creator.
 * *Find a way to* centralize, *distribute* and promote *SHEL configuration files*.
 * *Allow users to choose from different numerical schemes from dropdown menus.* Make it easy from the developers side to integrate new numerical schemes in the SHEL.
 * *See if the code is faster by avoiding to use the `global` directive*, while keeping in mind the same global variables philosophy. Perhaps by pushing structures in the function calls...
----
=The Arakawa C staggered grids matricial design=
The SHEL is about 2D layers of water properties, be it elevation, u-component of velocity, v-component of velocity, energy or enstrophy. Thus, most critical variables will be stored in matrices of specific sizes, representing a specific mesh, which is regular, orthogonal, cartesian and ... staggered. This mesh is well known in numerical modeling literature as the staggered Arakawa C grid. There four types of orthogonal, rectangular, regularly spaced grids: the *T-cells*, the *U-cells*, the *V-cells* and the *W-cells*. They are sketched as follows:

{{{
%    --j y
%   |           --- V ---           V ------- V         U -- T -- U
%   i          |         |          |         |         |         |
%   x          U    T    U          T    U    T         |    V    |
%              |         |          |         |         |         |
%               --- V ---           V ------- V         U -- T -- U
%                 T-cell               U-cell              V-cell
%                  M x N               M+1 x N             M x N+1
%       T(eta, H, tr, d, f, mask,   U(u, mask_u         V(v, mask_v
%           x, y, wind and bottom      x_u, y_u)           x_v, y_v)
%            stress, curl(v,u,0))
%
%    --j y
%   |           --- U ---  
%   i          |         | 
%   x          V    W    V 
%              |         | 
%               --- U ---  
%                 T-cell
%                M+1 x N+1
%       W( curl(u,v,0) )
%        (deformation rate = curl(-u,v,0)
}}}

 * *T-cells*: 
  * size: MxN. 
  * Variables: water elevation, bathymetry depth, water column depth, land mask.
 * *U-cells*: 
  * size (M+1)xN. 
  * variables: u-component of velocity, flux mask along u-axis.
 * *V-cells*:
  * size Mx(N+1). 
  * variables: v-component of velocity, flux mask along v-axis.
 * *W-cells*: 
  * size (M+1)x(N+1).
  * variables: relative vorticity (curl).

Please refer to the _technical guide_ in the [http://code.google.com/p/shel/downloads/list downloads section] for more details.
 
----
=Resources listing=
Here's an exhaustive description of the SHEL inner resources, such as folders, files, functions and global variables.

==Folders==
 * `root` folder: contains the SHEL matlab scripts.
 * `initial-conditions`: contains SHEL configurations in the matlab data file format (.mat). See the TemplatesDescription for more details
 * `images-results`: if not present, the folder is created after the user exports images from the SHEL views panel. It contains a set of sub-folders, each containing images, avi movies generated by the user, along with the SHEL configuration file and the timeseries data files.
 * `bathymetries`: contains files containing bathymetry (`d`), level (`eta`) and velocity (`u`, `v`) variables stored in the matlab data file format (.mat).

==Files==
===matlab scripts===
 * `launch.m`: fires up the _control panel_ and its _resetbutton_ callback.
 * `controlpanel2D.m`: codes the full _control panel_ interface.
  * `About.m`:
  * `visualize_v2.m`: codes the full _two-views panel_ interface.
  * `visualize_v4.m`: codes the full _four-views panel_ interface.
   * `initialconditions.m`: codes the initial conditions for the global matricial variables.
   * `ComputeModel.m`: codes the main loop in time of a SHEL simulation.
    # `ComputeLeapfrog.m`: codes the momentum and water level after a single iteration in time.
     * `ComputeContinuity.m`: codes the water level increment during a single time-iteration.
     * `ComputeSpaceU_CS.m`: codes the momentum increments during a single time-iteration-
     * `ComputeTimeU_FT.m`: codes the new momentum after the single time-iteration for the inner-domain.
     * `computeOB_U.m`: codes open-boundary conditions.
    # `ComputeDiagnostics.m`: codes the computation of the diagnostic quantities.
    # `ComputeTracer_FT.m`: codes the tracer after a single time-iteration.
    # `plotmodel.m`: codes the views graphical rendering.
    # `printit.m`: codes the exporting to png, eps or avi formats.

==Global variables==

===loadable and save-able===
Excerpt taken from the `controlpanel2D.m` file:
{{{
%Physical processes
global coriolis; %use coriolis force? Logical.
global bottom; %use bottom stress? Logical.
global wind; %use wind stress? Logical.
global pressure; %use pressure gradient force? Logical.
global noslip; %use no-slip? Logical.

%Physics parameters
global rho_air; %air density. Real.
global rho0; %water density. Real.
global Nu; %water turbulent horizontal viscosity. Real.
global g; %gravitational pull. Real.
global f; %Coriolis frequency. Real.
global lb; %Bottom rugosity length. Real.
global uwind; %x-axis wind speed component. Real.
global vwind; %y-axis wind speed component. Real.
global karman; %Von Karman constant. Real.

%Grid parameters
global duration; %time duration. Real
global outputL; %number of iterations for output. Hidden. Integer.
global outputdt; %time interval between graphical outputs. Real.
global dt; %time step. Real.
global dx; %x-axis grid step. Real.
global dy; %y-axis grid step. Real.

global gama; %gama coefficient for Asselin-Robert filter. Hidden. Real.

%Bathymetry
global d0; %Constant depth. Real.
global M; % x-axis grid size. Integer.
global N; % y-axis grid size. Integer
global L; % Characteristic length. Real.
 %Bathymetry file
global loadbathymetry; %bathymetry test. Logical.
global bathymetryfile; %bathymetry file. String.
global d; %The current bathymetry. Matrix.
global eta0; % Initial water elevation. Matrix.
 %step bottom
global step; %Step test. Logical.
global d0_step; %Step depth. Real.
 %island
global tc_isla; %Use island? Logical.
global isla_x0; %island x-position. Real.
global isla_y0; %island y-position. Real.
global isla_R; %island radius. Real.

%Initial conditions
global tc_taylor; %Use taylor column initialization? Logical.
global tc_geostrophic; %user geostrophic initial fields? Useless. Logical.
 %bump
global tc_bump; %Use gaussian elevation? Logical.
global bump_x0; %gaussian center x-position. Real.
global bump_y0; %gaussian center y-position. Real.
global bump_sx; %gaussian width along x-axis. Real.
global bump_sy; %gaussian width along y-axis. Real.
global bump_d0; %gaussian max height. Real.

%tracer
global tracer; %Use tracer? Logical.
global K; %tracer horizontal turbulent diffusivity.
global TrXo; %tracer center x-position. Real.
global TrYo; %tracer center y-position. Real.
global TrR; %tracer radius. Real.
global Treshold; %tracer min concentration, above which integration is 
                 %made in diagnostics. Real.

%boundary conditions
global radiatelevel; %Use level radiation? Logical. 
global flather; %Use flather radiation? Logical.
global neumann; %Use neumann condition? Logical.
global radiatetan; %Use radiation for tangential velocity? Logical.
global u_closed; %Close the x-axis boundary? Logical.
global v_closed; %Close the y-axis boundary? Logical.

%Panels outputs & properties
global npanels; %Two or four panels? Integer.
global leftprop;  %Property number from property list. For the left panel. Integer.
global rightprop; %Property number from property list. For the right panel. Integer.
 %CLim coef A: [-1eA 1eA]
global CLimEta; % m [-10. 2.] Water level Z-scale limits. Real vector.
global CLimV; % m/s [0. 100.] velocity Z-scale limits. Real vector.
global CLimLeft; % J [-10. 10.] left property z-scale limits. Real vector.
global CLimRight; % J [-10. 10.] right property z-scale limits. Real vector.
 %print to file
global film; %Do we animate the simulation and render it on screen? Logical.
global printG; %Do we export the screen rendering to a file? Logical.
global myfile; %filename to build sub-folder and image filenames. String.
global optprint; %Which export format and which property? Integer.
global movie; %Is it the avi format we want to export? Logical.
global frame; %frame counter of the graphical exports. integer.
}}}

===Initializable global matrices===
Excerpts taken from `initialconditions.m`
{{{
%function initialconditions
global time;
global timetr;

%function makecoordinates
global x;
global y;

global x_u;
global y_u;

global x_v;
global y_v;

global x_w;
global y_w;

%function fillfields

}}}

==Functions==